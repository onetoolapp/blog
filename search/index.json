[{"content":"简介 Scrapy 是一个快速的高级网页爬取和网页抓取框架，用于爬取网站并从其页面中提取结构化数据。它可以用于广泛的用途，从数据挖掘到监控和自动化测试。\n本文记录 Python 环境搭建和 Scrapy 爬虫框架的基本使用方法。\n环境 项目使用 Poetry 进行包管理。\nPoetry 是一个现代化的 Python 包管理工具，用于管理 Python 项目的依赖关系。\n参照官方文档安装即可\n创建项目 1 2 3 4 5 6 7 8 9 10 11 # 创建项目 poetry new scrapy-demo # 进入项目目录 cd scrapy-demo # 安装依赖 poetry add scrapy # 进入虚拟环境 poetry shell Tip 按照官方建议，可以指定项目为非 package 模式\n1 2 3 4 5 # 指定非package模式 [tool.poetry] # ... package-mode = false 基本使用 主要根据官方教程，了解基本使用方式\n创建爬虫项目 1 scrapy startproject tutorial 第一个爬虫 在tutorial/tutorial/spiders/目录下创建quotes_spider.py文件，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from pathlib import Path import scrapy class QuotesSpider(scrapy.Spider): name = \u0026#34;quotes\u0026#34; def start_requests(self): urls = [ \u0026#34;https://quotes.toscrape.com/page/1/\u0026#34;, \u0026#34;https://quotes.toscrape.com/page/2/\u0026#34;, ] for url in urls: yield scrapy.Request(url=url, callback=self.parse) def parse(self, response): page = response.url.split(\u0026#34;/\u0026#34;)[-2] filename = f\u0026#34;quotes-{page}.html\u0026#34; Path(filename).write_bytes(response.body) self.log(f\u0026#34;Saved file {filename}\u0026#34;) 运行爬虫 1 2 3 4 cd tutorial # 运行爬虫 scrapy crawl quotes 总结 可以看到 将页面保存成了 html 文件，更多的使用方式参考官方文档。\n","date":"2025-01-03T00:00:00Z","image":"https://img.onetool.app:/2025/01/7fa669a05dd1bc5994299f069558f30d.webp","permalink":"https://blog.onetool.app/p/python-scrapy/","title":"Python Scrapy 爬虫框架入门"},{"content":"你是否经常遇到这样的困扰：每月交着几十块的套餐费，流量还是不够用？想换套餐，却发现更便宜的套餐根本找不到？别着急，今天就教大家一个省钱妙招 —— 8 元套餐+大流量卡的完美组合！\n查找一番后，决定使用8 元套餐+大流量卡搭配使用，不再为流量不足而烦恼，具体方法在这里分享给大家。\n更换移动 8 元套餐 移动用户可以按以下步骤操作（其他运营商可以尝试类似方法）：\n打开移动 APP，依次点击我的 → 客服 → 在线客服\n直接发送申请8元套餐，然后点击预约登记更换套餐\n填写预约信息时要注意：\n套餐选项中虽然没有 8 元套餐，随便选择一个即可\n重点是在其他套餐内容需求中明确写明：申请更换8元套餐\n等待客服回电，明确表达想要更换 8 元套餐的意愿\n💡8 元套餐有两个版本可选\n100M 流量版 30 分钟通话版 Warning 超出套餐是会额外收费的，建议套餐生效后，关闭 SIM 的流量。\n搭配大流量卡 想要获得大流量卡，有两个选择：\n方案一：直接领取 扫描下方二维码，免费申请大流量卡：\n方案二：成为代理商 为什么要选择成为代理商？\n自己办理可以获得佣金返现（约 100 元/张） 可以推荐给亲朋好友赚取额外收入 可以通过网络营销获得被动收入 立即注册\n注册后，后台可以看到每张卡的返佣，一张卡都有 100 块左右，可以自己申领，也可以推荐给身边朋友，网上宣传，来赚取佣金。\n","date":"2024-12-23T00:00:00Z","image":"https://img.onetool.app:/2024/12/1a9ca3075f9ade3a673f8a1341b4771f.webp","permalink":"https://blog.onetool.app/p/large-data-card/","title":"8元套餐+大流量卡，从此流量不再愁"},{"content":"GitHub Alerts 简介 GitHub Alerts 是一种优雅的信息提示方式，可以让你在 Markdown 文档中创建醒目的提示框。通过简单的语法，你可以添加不同类型的提示框来突出显示重要信息，使文档更具可读性和层次感。\n基本语法 GitHub Alerts 的语法非常直观。只需在引用块的开头添加特定标识符即可：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026gt; Default blockquote \u0026gt; [!NOTE] \u0026gt; Highlights information that users should take into account, even when skimming. \u0026gt; [!TIP] \u0026gt; Optional information to help a user be more successful. \u0026gt; [!IMPORTANT] \u0026gt; Crucial information necessary for users to succeed. \u0026gt; [!WARNING] \u0026gt; Critical content demanding immediate user attention due to potential risks. \u0026gt; [!CAUTION] \u0026gt; Negative potential consequences of an action. 效果对比 默认的渲染效果： 优化后的效果： Default blockquote\nNote Highlights information that users should take into account, even when skimming.\nTip Optional information to help a user be more successful.\nImportant Crucial information necessary for users to succeed.\nWarning Critical content demanding immediate user attention due to potential risks.\nCaution Negative potential consequences of an action.\n实现步骤 根据hugo 官方文档，我们可以创建render hooks来覆盖 markdown 转换为 HTML 的 样式。\n修改渲染模板 在layouts/_default/_markup目录下创建render-blockquote-alert.html 和 render-blockquote-regular.html文件，并分别添加以下代码：\nrender-blockquote-regular.html\n1 \u0026lt;div role=\u0026#34;blockquote\u0026#34; class=\u0026#34;markdown-blockquote\u0026#34;\u0026gt;{{ .Text }}\u0026lt;/div\u0026gt; render-blockquote-alert.html\n1 2 3 4 5 6 7 8 9 10 11 12 {{ $svgs := dict \u0026#34;caution\u0026#34; \u0026#34;stop\u0026#34; \u0026#34;important\u0026#34; \u0026#34;report\u0026#34; \u0026#34;note\u0026#34; \u0026#34;info\u0026#34; \u0026#34;tip\u0026#34; \u0026#34;light-bulb\u0026#34; \u0026#34;warning\u0026#34; \u0026#34;alert\u0026#34; }} {{ $svg := resources.GetMatch (printf \u0026#34;svg/octicons/%s-16.svg\u0026#34; (index $svgs .AlertType)) }} \u0026lt;div role=\u0026#34;blockquote\u0026#34; class=\u0026#34;markdown-alert markdown-alert--{{ .AlertType }}\u0026#34; \u0026gt; \u0026lt;div class=\u0026#34;markdown-alert__title\u0026#34;\u0026gt; {{ $svg.Content | safeHTML }} {{ title .AlertType }} \u0026lt;/div\u0026gt; {{ .Text | safeHTML }} \u0026lt;/div\u0026gt; 这里使用 div 标签，而不是使用 blockquote 标签，是为了避免主题的 CSS 选择器覆盖样式。\n修改样式 在assets/scss/custom.scss文件中添加对应样式：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 :root { --c-done: #622cbc; --c-success: #055d20; --c-danger: #a0111f; --c-warning: #744500; --c-info: #0349b4; --c-muted: #636c76; --c-text-default: #222; --c-bg-mix: white; --img-shadow: rgba(0, 0, 0, 0.1); // 亮色主题下的阴影颜色 --c-link: #0066cc; } :root[data-scheme=\u0026#39;dark\u0026#39;] { --c-done: #9d71e8; --c-success: #3fb950; --c-danger: #f85149; --c-warning: #d29922; --c-info: #58a6ff; --c-muted: #8b949e; --c-text-default: #e6edf3; --c-bg-mix: #0d1117; --img-shadow: rgba(255, 255, 255, 0.1); // 暗色主题下的阴影颜色 --c-link: #58a6ff; } .markdown-blockquote, .markdown-alert { margin-bottom: 1.6rem; padding: 0.8rem 1.6rem; border-left: 4px solid var(--c-muted); border-radius: 6px; } .markdown-blockquote { background-color: color-mix(in srgb, var(--c-muted) 10%, var(--c-bg-mix)); padding: 0.8rem 1.6rem; } .markdown-alert--note { border-left-color: var(--c-info); color: var(--c-info); background-color: color-mix(in srgb, var(--c-info) 10%, var(--c-bg-mix)); } .markdown-alert--tip { border-left-color: var(--c-success); color: var(--c-success); background-color: color-mix(in srgb, var(--c-success) 10%, var(--c-bg-mix)); } .markdown-alert--important { border-left-color: var(--c-done); color: var(--c-done); background-color: color-mix(in srgb, var(--c-done) 10%, var(--c-bg-mix)); } .markdown-alert--warning { border-left-color: var(--c-warning); color: var(--c-warning); background-color: color-mix(in srgb, var(--c-warning) 10%, var(--c-bg-mix)); } .markdown-alert--caution { border-left-color: var(--c-danger); color: var(--c-danger); background-color: color-mix(in srgb, var(--c-danger) 10%, var(--c-bg-mix)); } .markdown-alert \u0026gt; p { color: var(--c-text-default); } .markdown-alert \u0026gt; p:last-child { margin-bottom: 0; } .markdown-alert__title { margin-bottom: 1.6rem; display: flex; align-items: center; font-weight: 600; font-size: 1.6rem; } .markdown-alert__title \u0026gt; svg { fill: currentColor; margin-right: 0.8rem; display: block; } 添加 svg 图标 在assets/svg/octicons目录下创建对应的 svg 图标，你可以直接保存以下图标到本地：\n这样就可以显示好看的 alerts 样式了。\n","date":"2024-12-19T15:35:19+08:00","image":"https://img.onetool.app:/2024/12/ee1d9f21b1ebbcf2d624d65f83047ba0.webp","permalink":"https://blog.onetool.app/p/github-style-alert/","title":"在 Hugo 中实现 GitHub 风格的 Alerts 提示框"},{"content":"图床是一个专门用来存储和管理图片的服务器或服务。通过图床，我们可以将图片上传到网络上，并生成一个可以访问的链接。这样在写博客、发帖或者其他需要使用图片的场景中，只需要引用图片链接即可，而不需要将图片嵌入到文章中。\n在这篇文章中，我将介绍如何使用 Cloudflare 的 R2 服务搭建一个免费的图床，并且搭配 PicGo 工具快速上传图片。\nCloudflare R2 Cloudflare R2 对象存储 允许开发人员存储大量非结构化数据，而无需支付与典型云存储服务相关的昂贵的出口带宽费用，并且有 10G 的免费存储额度，对于个人博客来说足够使用了。\n登录 Cloudflare ，没有账号的话自己注册一个。\n从左侧菜单栏中找到 R2对象存储 ，点击进入 R2 管理页面\nNote 如果没有开通 R2 服务，需要先开通服务，绑定信用卡或 PayPal，这里推荐 WildCard 的虚拟信用卡，可以免费申请。\n点击 Create bucket 创建存储桶。\n填写存储桶名称，选择存储桶区域，点击 Create 创建存储桶。\n此时我们已经可以向存储桶上传文件了，可以选择在网页直接上传文件或文件夹。\n配置 S3 API，以便使用 PicGo 上传图片。\n完成创建后会显示所有密钥，PicGo 配置需要，因为只会显示一次，建议在密码管理软件或其他地方妥善保管好这些参数信息。\n配置自定义域名\n进入存储桶的设置，配置自定义域名或启用 r2.dev 域名。 至此，我们需要在 Cloudflare R2 上配置的部分就完成了，接下来我们需要配置 PicGo 客户端。\nPicGo PicGo 是一个图片上传工具，支持多种图床。\n下载并安装 PicGo\n进入官方仓库 PicGo ，下载对应平台的安装包。\n基本操作参照官方文档即可。\n安装插件\nPicgo 默认是不支持 S3 图床的，需要安装插件。我使用了以下插件，可视情况安装。\npicgo-plugin-s3 让 Picgo 支持 S3 图床上传\npicgo-plugin-pic-migrater 将本地图片批量迁移到图床\npicgo-plugin-watermark 为图片添加水印\npicgo-plugin-compress 压缩图片\n其他插件可查看 Awesome-PicGo 插件列表\n配置 PicGo\n在 PicGo 中添加一个 Amazon S3 类型的图床，将 Cloudflare R2 的配置信息填入即可。 自定义输出模板是 {protocol}://img.onetool.app:{port}/{path}，可以换成自己的域名，这样上传图片后，剪贴板的链接就是自定义的域名。\n其他插件配置参考对应插件文档即可，都很简单。\n截图工具 截图工具可以使用微信、QQ 等软件的截图功能，而我使用的是 PixPin，简单来说是一个截图、贴图的工具，但是 PixPin 以截图和贴图两大功能为核心做了大量的优化功能，目标是提升用户在工作时的工作效率，无论用户使用电脑做何种工作，都可以使用 PixPin 提高工作效率。\n比如支持 GIF 录制：\nWarning 目前使用的图片水印插件 watermark 1.2.1，上传 GIF 图片会报错，需要禁用插件。\n配置好图床后，就可以顺畅的写文章啦，发布到多个平台也更加方便。\n","date":"2024-12-18T15:35:19+08:00","image":"https://img.onetool.app:/2024/12/c13ba8845062277801d1a8a6931af1c1.webp","permalink":"https://blog.onetool.app/p/image-hosting/","title":"白嫖Cloudflare，搭建免费图床"},{"content":"在当今信息爆炸的时代，我决定创建这个个人博客来沉淀自己的思考和经验。一方面，写博客能帮助我更系统地整理知识，将零散的想法形成完整的体系；另一方面，也希望通过分享，能与志同道合的朋友交流学习，共同进步。\n虽然现在已经有很多现成的博客平台，但我选择从零开始搭建，既是为了获得更大的自由度和可定制性，也是一次学习和实践的机会。在这篇文章中，我将记录整个博客的搭建过程，希望能对有类似想法的朋友有所帮助。\n说明 本博客使用的是 hugo 的 Stack 主题，该主题提供了一个快速启动模板。\n部署在 github pages 上，使用 github action 自动部署。\n环境安装 在 Windows 中，hugo 的安装很简单，只需要按照官方文档的步骤进行即可。\n安装必备软件: 安装 Git 安装 GO 安装 Dart Sass 安装 hugo 1 2 3 4 choco install hugo-extended # 验证安装 hugo version 如果成功打印出 hugo 的版本号，则说明安装成功。可以根据官方快速开始教程尝试创建一个博客。\n安装部署 一种方式是根据 Stack 主题的快速启动模板 的步骤创建部署，非常简单。\n如果你想将源码放在私有仓库上，通过 github action 将编译后的代码部署到另一个公开仓库，可以参考以下步骤。\n创建仓库 首先要在 github 上创建两个仓库： test-blog-private 用于存放源码 onetoolapp.github.io 用于存放编译后的代码 Tip 如果你要使用 github 的免费域名，公开的仓库必须命名为 \u0026lt;username\u0026gt;.github.io 。username 是你的 github 用户名。有自己域名的话，可以随意命名。\n上传代码 先将主题代码 clone 到本地\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack-starter.git 修改远程仓库地址\n1 2 3 4 5 git remote set-url origin https://github.com/onetoolapp/test-blog-private.git # 查看远程仓库地址 git remote -v # 推送代码 git push 推送完成后，可以看到仓库有两个分支，分别是 main 和 gh-pages。但这是一个私有仓库，如果想要启用 github pages，必须是 GitHub Pro 账户，或者将仓库公开。 接下来，我们修改一下配置，让 github action 将编译后的代码部署到另一个公开仓库。\n修改配置 网站是通过 github action 部署的，先来看一下部署配置。\n43 44 45 46 47 48 49 50 51 # .github/workflows/deploy.yml // ... - name: Deploy 🚀 uses: JamesIves/github-pages-deploy-action@v4 with: branch: gh-pages folder: public clean: true single-commit: true 查看这个github-pages-deploy-action 的文档 的文档，可以看到如何配置推送到另一个仓库。\n将部署相关配置进行如下修改：\n44 45 46 47 48 49 50 51 52 53 54 55 // ... - name: Deploy 🚀 uses: JamesIves/github-pages-deploy-action@v4 with: branch: gh-pages folder: public clean: true single-commit: true # 目标仓库名，GitHub用户名/目标仓库名 repository-name: onetoolapp/onetoolapp.github.io # 能够访问目标仓库的 PAT token token: ${{ secrets.TEST_BLOG_DEPLOY_TOKEN }} PAT token，是 github 的 personal access token，用于授权 github action 访问目标仓库。接来下需要创建并配置这个密钥。\n创建并设置 PAT token 在 github 上，点击右上角的头像，选择 Settings，然后选择 Developer settings，再选择 Personal access tokens，点击 Generate new token。\n然后点击 Generate token，将生成的 token 复制保存下来。\n接下来来到私有仓库 test-blog-private 的 Settings 页面，选择 Secrets and variables，然后选择 Actions，点击 New repository secret。\n配置后，重新提交代码，稍等片刻，可以看到 github action 执行成功了。编译后的代码也自动发布在公开仓库。 安装完成 访问 https://onetoolapp.github.io ，可以看到博客已经成功部署了。 Note 本地址将作为示例，可以直接访问\n接下来，可以参考官方文档和主题文档，进行一些个性化配置，然后开始写文章发布啦。\n","date":"2024-12-18T15:35:19+08:00","image":"https://img.onetool.app:/2024/12/fd60eec47780a43dd3502b3810474a7c.webp","permalink":"https://blog.onetool.app/p/create-blog/","title":"记录一下使用 Hugo 搭建个人博客"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","image":"https://img.onetool.app:/2024/12/8e790dc5fbc0895743432c933c776ed5.webp","permalink":"https://blog.onetool.app/p/markdown-syntax/","title":"Markdown语法指南"}]